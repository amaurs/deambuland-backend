"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();
async function updateEasterEgg(easterEgg) {
    let params = {
        TableName: process.env.EASTER_EGGS_TABLE,
        Key: {
            id: easterEgg.id,
            authorId: easterEgg.authorId,
        },
        ExpressionAttributeValues: {},
        ExpressionAttributeNames: {},
        UpdateExpression: "",
        ReturnValues: "UPDATED_NEW"
    };
    let prefix = "set ";
    let attributes = Object.keys(easterEgg);
    for (let i = 0; i < attributes.length; i++) {
        let attribute = attributes[i];
        if (attribute !== "id") {
            params["UpdateExpression"] += prefix + "#" + attribute + " = :" + attribute;
            params["ExpressionAttributeValues"][":" + attribute] = easterEgg[attribute];
            params["ExpressionAttributeNames"]["#" + attribute] = attribute;
            prefix = ", ";
        }
    }
    console.log('params: ', params);
    try {
        await docClient.update(params).promise();
        return easterEgg;
    }
    catch (err) {
        console.log('DynamoDB error: ', err);
        return null;
    }
}
exports.default = updateEasterEgg;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlRWFzdGVyRWdnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXBkYXRlRWFzdGVyRWdnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQVdwRCxLQUFLLFVBQVUsZUFBZSxDQUFDLFNBQWM7SUFDM0MsSUFBSSxNQUFNLEdBQVk7UUFDcEIsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCO1FBQ3hDLEdBQUcsRUFBRTtZQUNILEVBQUUsRUFBRSxTQUFTLENBQUMsRUFBRTtZQUNoQixRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVE7U0FDN0I7UUFDRCx5QkFBeUIsRUFBRSxFQUFFO1FBQzdCLHdCQUF3QixFQUFFLEVBQUU7UUFDNUIsZ0JBQWdCLEVBQUUsRUFBRTtRQUNwQixZQUFZLEVBQUUsYUFBYTtLQUM1QixDQUFDO0lBQ0YsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3BCLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEMsS0FBSyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdEMsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLElBQUksU0FBUyxLQUFLLElBQUksRUFBRTtZQUN0QixNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxNQUFNLEdBQUcsU0FBUyxDQUFDO1lBQzVFLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDNUUsTUFBTSxDQUFDLDBCQUEwQixDQUFDLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUNoRSxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ2Y7S0FDSDtJQUNBLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQy9CLElBQUk7UUFDRixNQUFNLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDeEMsT0FBTyxTQUFTLENBQUE7S0FDakI7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDcEMsT0FBTyxJQUFJLENBQUE7S0FDWjtBQUNILENBQUM7QUFFRCxrQkFBZSxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5jb25zdCBkb2NDbGllbnQgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5cbnR5cGUgUGFyYW1zID0ge1xuICBUYWJsZU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgS2V5OiBzdHJpbmcgfCB7fSxcbiAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogYW55LFxuICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IGFueSxcbiAgVXBkYXRlRXhwcmVzc2lvbjogc3RyaW5nLFxuICBSZXR1cm5WYWx1ZXM6IHN0cmluZ1xufVxuXG5hc3luYyBmdW5jdGlvbiB1cGRhdGVFYXN0ZXJFZ2coZWFzdGVyRWdnOiBhbnkpIHtcbiAgbGV0IHBhcmFtcyA6IFBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LkVBU1RFUl9FR0dTX1RBQkxFLFxuICAgIEtleToge1xuICAgICAgaWQ6IGVhc3RlckVnZy5pZCxcbiAgICAgIGF1dGhvcklkOiBlYXN0ZXJFZ2cuYXV0aG9ySWQsXG4gICAgfSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7fSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHt9LFxuICAgIFVwZGF0ZUV4cHJlc3Npb246IFwiXCIsXG4gICAgUmV0dXJuVmFsdWVzOiBcIlVQREFURURfTkVXXCJcbiAgfTtcbiAgbGV0IHByZWZpeCA9IFwic2V0IFwiO1xuICBsZXQgYXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKGVhc3RlckVnZyk7XG4gIGZvciAobGV0IGk9MDsgaTxhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XG4gICAgaWYgKGF0dHJpYnV0ZSAhPT0gXCJpZFwiKSB7XG4gICAgICBwYXJhbXNbXCJVcGRhdGVFeHByZXNzaW9uXCJdICs9IHByZWZpeCArIFwiI1wiICsgYXR0cmlidXRlICsgXCIgPSA6XCIgKyBhdHRyaWJ1dGU7XG4gICAgICBwYXJhbXNbXCJFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXCJdW1wiOlwiICsgYXR0cmlidXRlXSA9IGVhc3RlckVnZ1thdHRyaWJ1dGVdO1xuICAgICAgcGFyYW1zW1wiRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzXCJdW1wiI1wiICsgYXR0cmlidXRlXSA9IGF0dHJpYnV0ZTtcbiAgICAgIHByZWZpeCA9IFwiLCBcIjtcbiAgICB9XG4gfVxuICBjb25zb2xlLmxvZygncGFyYW1zOiAnLCBwYXJhbXMpXG4gIHRyeSB7XG4gICAgYXdhaXQgZG9jQ2xpZW50LnVwZGF0ZShwYXJhbXMpLnByb21pc2UoKVxuICAgIHJldHVybiBlYXN0ZXJFZ2dcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coJ0R5bmFtb0RCIGVycm9yOiAnLCBlcnIpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB1cGRhdGVFYXN0ZXJFZ2c7Il19